buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		// spring
		classpath('org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE')
		classpath('org.springframework:springloaded:1.2.6.RELEASE')
	}
}

plugins {
	id "com.moowork.node" version "0.12"
	id "com.moowork.gulp" version "0.12"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
	mavenCentral()
}

eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8')
	}
}

jettyRun {

}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("${buildDir}/classes/main/")
    }
}

jar {
	baseName = 'spring-boot-angular2'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	dev
	runtimeOnly
}

dependencies {
	// spring
	compile('org.springframework.boot:spring-boot-starter-web')
	// google gson
	compile('com.google.code.gson:gson:2.6.2')
	// https://mvnrepository.com/artifact/com.github.jsimone/webapp-runner
	compile group: 'com.github.jsimone', name: 'webapp-runner', version: '8.0.33.1'
	compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version:'2.6.2'

	// spring dev tools
	dev('org.springframework.boot:spring-boot-devtools')

	// testing
	testCompile('org.springframework.boot:spring-boot-starter-test')

	// to run our App on Heroku
//	runtimeOnly "org.mortbay.jetty:jetty-runner:8.1.1.v20120215"
	// monitoring on Heroku
	runtimeOnly "com.newrelic.agent.java:newrelic-agent:2.18.0"
}

def generatedWebResources = "${buildDir}/generated-web-resources"

sourceSets {
	main {
		output.dir(generatedWebResources, builtBy: 'gulp_build')
	}
}

// configure gradle-node-plugin
node {
	version = '6.3.0'
	npmVersion = '3.10.5'
	download = true
	workDir = file("${project.projectDir}/src/main/web/node")
	nodeModulesDir = file("${project.projectDir}/src/main/web")
}

// configure gradle-grunt-plugin
gulp {
	workDir = file("${project.projectDir}/src/main/web");
	colors = true
	bufferOutput = false
}

// watch ts, sass, html files for changes and build
task gulpWatch(type: GulpTask) {
    args = ['watch']
}

// gradle wrapper
task wrapper(type: Wrapper) {
	gradleVersion = '2.14'
}

// clean node/node_modules/typings
task npmClean(type: Delete) {
	final def webDir = "${rootDir}/src/main/web"
	delete "${webDir}/node"
	delete "${webDir}/node_modules"
	delete "${webDir}/typings"
}

//task copyToLib << {
//	copy {
//		from configurations.runtimeOnly.copy().setTransitive(false)
//		into "$buildDir/libs"
//		rename { name ->
//			def artifacts = configurations.runtimeOnly.resolvedConfiguration.resolvedArtifacts
//			def artifact = artifacts.find { it.file.name == name }
//			"${artifact.name}.${artifact.extension}"
//		}
//	}
//}

task copyToLib << {
	copy {
		from configurations.compile
		into "$buildDir/libs"
		include "webapp-runner*"
	}
}


task stage(dependsOn: ["clean", "war", "copyToLib"])

// run spring boot app
bootRun {
	addResources = true
	classpath = sourceSets.main.runtimeClasspath + configurations.dev
}

// ensure resources are processed before code is compiled
compileJava.dependsOn(processResources);
// build front-end before making jar
processResources.dependsOn(npmInstall)
npmInstall.finalizedBy(gulp_build)

// run npmClean before clean
clean.dependsOn(npmClean)
